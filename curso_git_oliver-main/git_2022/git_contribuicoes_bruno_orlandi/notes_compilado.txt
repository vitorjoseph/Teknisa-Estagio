=========================================================================================
--- DEPOIS DO GIT INSTALADO ---
=========================================================================================




=========================================================================================
PODEMOS CONFIRMAR QUE O GIT FOI INSTALADO NO SISTEMA OPERACIONAL USANDO O COMANDO:
	-> GIT --VERSION

O RETORNO SERÁ A VERSÃO INSTALADA NO SISTEMA OPERACIONAL


=========================================================================================
* PARA CONFERIR ALGUNS COMANDOS DO GIT BASTA UTILIZAR:
	-> GIT

O RETORNO SERÁ UMA SÉRIE DE COMANDOS E ALGUMAS EXPLICAÇÕES BÁSICAS SOBRE ELES
=========================================================================================



=========================================================================================
--- APÓS VISUALIZAR ESSAS INFORMAÇÕES PASSAREMOS A INICIAR A UTILIZAÇÃO DAS FUNCIONALIDADES DO GIT. IREMOS SELECIONAR UMA PASTA QUALQUER, DE PREFERÊNCIA NOVA; E DENTRO DELA IREMOS CRIAR NOSSO PRIMEIRO REPOSITÓRIO GIT ---

* MKDIR		-> CRIAR PASTA OU ARQUIVO
* LS			-> EXIBIR CONTEÚDO DA PASTA
* CD			-> PRÉFIXO PARA ALTERAR ENTRE PASTAS
* CLEAR		-> COMANDO DE LIMPAR A TELA

* HÁ MUITOS OUTROS

=============================================================================================
--- VERSIONAMENTO E VERSÃO ---
A PRINCIPAL DIFERENÇA ENTRE VERSIONAMENTO E VERSÃO É QUE A VERSÃO É O CÓDIGO NA SUA FASE MAIS RECENTE, ENQUANTO O VERSIONAMENTO FORAM AS ALTERAÇÕES QUE ELE TEVE DURANTE O CAMINHO.
POR EXEMPLO, VOCÊ PODE TER A MESMA VERSÃO DE PRODUTO E ESSA VERSÃO VAI SER VERSIONADAS EM DUAS BRANCHS. PARA DUAS MODIFICAÇÕES, POR EXEMPLO.

USUÁRIOS QUE NUNCA INSTALARAM OU TIVERAM CONTATO COM O GIT, PROVAVELMENTE IRÁ TER QUE CONFIGURAR O USUÁRIO E EMAIL, PARA INFORMAR CADA UM DOS ITENS, UTILIZE OS COMANDOS A SEGUIR, LEMBRANDO QUE DENTRO DAS ASPAS IRAM AS INFORMAÇÕES PESSOAIS:
* SETANDO
	-> GIT CONFIG --GLOBAL USER.NAME " "
	-> GIT CONFIG --GLOBAL USER.EMAIL " "

PARA VISUALIZAR O NOME E EMAIL CADASTRADO, USE OS COMANDOS: 
* CONFIRMANDO
	-> GIT CONFIG USER.NAME
	-> GIT CONFIG USER.EMAIL

=============================================================================================
--- TAMBÉM PARA NOVOS USUÁRIOS, TANTO DO GIT, QUANDO DO GITHUB, AINDA É PRECISO CONFIGURAR O TOKEN DE SEGURANÇA, POIS NA HORA DA COMUNICAÇÃO ENTRE O GIT E O GITHUB, ESSA INFORMAÇÃO SERÁ PEDIDA. ENTRÃO, ENQUANTO TIVER NA PÁGINA DO GITHUB SIGA POR ESSE CAMINHO:
-> CADASTRO GIT
-> TOKEN DE ACESSO --> ALTERNATIVA DE AUTENTICAÇÃO DE CONTA
	-> SETTINGS
	-> DEVELOPER SETTINGS
	-> PERSONAL ACESS TOKENS
	-> GENERATE TOKENS
	-> ADD NOTE --> ADICIONE ALGUM COMENTÁRIO SOBRE ESSE TOKEN

APÓS CADASTRAR, COPIE O CÓDIGO INFORMADO PELO SITE, SE POSSÍVEL, SALVE EM UM ARQUIVO. DEPOIS DE TODO O PROCESSO DE COMANDOS DO GIT, HAVERÁ UM MOMENTO ANTES DO COMMIT ACONTECER, QUE O GIT IRÁ TE PEDIR ALGUMAS INFORMAÇÕES SOBRE O GITHUB. INFORMAÇÕES COMO USUÁRIO, SENHA E O TOKEN. QUANDO O GIT PEDIR O TOKEN, BASTA INSERIR O TOKEN NO CAMPO E CONTINUAR COM AS VALIDAÇÕES. APÓS ISSO, OCORERÁ O COMMIT E AMBOS, GIT E GITHUB, ESTARÃO INTERLIGADOS.


=========================================================================================
--- DENTRO DA PASTA DESEJADA ---

O PRIMEIRO OBJETIVO É INICIAR O REPOSITÓRIO DENTRO DESTA PASTA. PARA ISSO, VAMOS UTILIZAR O COMANDO:

	-> GIT INIT

O RETORNO SERÁ UMA INFORMAÇÃO DIZENDO QUE FOI INICIALIZADO UM REPOSITÓRIO GIT VAZIO DENTRO DO CAMINHO DA PASTA
=========================================================================================
--- PRIMEIRAS INFORMAÇÕES ---

TODAS AS VEZES QUE QUISERMOS SABER A SITUAÇÃO DO NOSSO REPOSITÓRIO, NOS PODEMOS UTILIZAR DE UM COMANDO PARA RECEBER ESSAS INFORMAÇÕES, O COMANDO:

	-> GIT STATUS

O RETORNO DESSE COMANDO VAI DEPENDER DA ATUAL SITUAÇÃO DO SEU REPOSITÓRIO. NESTE MOMENTO, COMO ESTAMOS INICIANDO UM REPOSITÓRIO NOVO, O RETORNO TRARÁ POUCAS INFORMAÇÕES. O RETORNO TRARÁ O NOME DA BRANCH* E AS ALTERAÇÕES OCORRIDAS. NO PRIMEIRO MOMENTO HAVERÁ UM AVISO DIZENDO QUE NÃO HÁ NADA PARA COMITAR, POR NÃO TER HAVIDO NENHUMA ALTERAÇÃO. E AINDA HÁ A SUGESTÃO DE CRIAR OU COPIAR ALGUM ARQUIVO E UTILIZAR OUTRO COMANDO DO GIT PARA SER RASTREADO

* VEREMOS MAIS INFORMAÇÕES SOBRE BRANCHS MAIS PRA FRENTE, MAS PARA TER UMA BASE; BRANCH TEM A MESMA REFERÊNCIA DO QUE UMA PASTA DO WINDOWS.
=========================================================================================
PARA FINS TÉCNICOS, NESSE MOMENTO, TODOS OS SEUS ARQUIVOS SÃO ARQUIVOS LOCAIS, POIS ELES AINDA NÃO FORAM RASTREADOS PELO GIT, OS ARQUIVOS SÓ IRAM PARA O SERVIDOR NO MOMENTO DO COMIT. TODO O TRABALHO É FEITO REMOTO E SÓ DEPOIS, ENTÃO, ELES VÃO PARA O SERVIDOR. NÃO HÁ CONEXÃO. SÓ HÁ UMA TRANSAÇÃO FEITA EM UM MOMENTO DEFINIDO.
=========================================================================================
--- BRANCH ---

O QUE É UMA BRANCH?
	-> BRANCH É UM DIRETÓRIO, UMA PASTA, UM "CAMINHO" ONDE ESTÃO TODOS OS SEUS ARQUIVOS. PRA EXEMPLIFICAR O MUNDO REAL, AS EMPRESAS POSSUEM MAIS DE UMA BRANCH DO MESMO PRODUTO. PODE TER UMA BRANCH DESTINADA PARA OS DESENVOLVEDORES TRABALHAREM, OUTRA BRANCH PARA QUANDO O PRODUTO FOR FINALIZADO E PRECISAR PASSAR POR TESTES E UMA OUTRA BRANCH PARA QUANDO FOR ENVIADO PARA OS CLIENTES UTILIZAREM. NÃO EXISTE LIMITES DE BRANCH, MAS DEVE-SE TOMAR CUIDADO PRA NÃO VIRAR BAGUNÇA
=========================================================================================
--- APÓS CRIAR OU ADICIONAR UM NOVO ARQUIVO NA SUA PASTA, VAMOS REFAZER ALGUNS PASSOS E ENTENDER AS MODIFICAÇÕES QUE ACONTECERAM. VAMOS COMEÇAR UTILIZANDO O STATUS PARA VERIFICAR QUAL A ATUAL SITUAÇÃO DOS ARQUIVOS.
	-> GIT STATUS

O RETORNO É PARECIDO COM O MESMO RETORNO DO STATUS ANTERIOR, PORÉM NOVAS INFORMAÇÕES SÃO MOSTRADAS. COM NOVOS ARQUIVOS NA PASTA O GIT CONSEGUE IDENTIFICAR QUE SÃO ARQUIVOS NOVOS. MAS ELES AINDA NÃO SÃO TRACKEADOS PELO GIT, OU SEJA, VOCÊ PODE FAZER MODIFICAÇÕES NESSES ARQUIVOS QUE NADA DISSO SERÁ ARMAZENADO. ELES ESTÃO NO ESTÁGIO DE 'UNTRACKED' E AINDA NÃO HÁ CONTROLE DE VERSÕES PARA ELES.

PARA QUE O GIT CONSIGA COMEÇAR A TRACKEAR ESSES ARQUIVOS, É NECESSÁRIO ADICIONAR OS ARQUIVOS AO GIT. E ISSO É FEITO COM O COMANDO:
	-> GIT ADD <file> (GIT ADD .)

A PARTIR DE AGORA, SE PUXARMOS NOVAMENTE O STATUS PARA VERIFICAR OS ARQUIVOS, PERCEBEREMOS QUE AGORA, OS ARQUIVO ESTÃO SENTRO TRACKEADOS. NO ENTANTO ELES AINDA NÃO ESTÃO NO SERVIDOR. AGORA OS ARQUIVOS ESTÃO ESPERANDO SEREM ENVIADOS. TIPO UM PRÉ-ENVIO. 

CASO NESSE MOMENTO, VOCÊ PERCEBA QUE ENVIOU ARQUIVOS ERRADOS OU SIMPLEMENTE NÃO QUER MAIS ENVIAR O ARQUIVO, VOCÊ TEM A OPÇÃO DE SE UTILIZAR DE UM OUTRO COMANDO.
	-> GIT RM --CACHED <file>

E QUANDO O COMANDO FOR UTILIZADO, O ARQUIVO VOLTA PARA O PRIMEIRO ESTÁGIO. ESSES ARQUIVO ESTÃO NOVAMENTE NA PARTE DO 'UNTRACKED'. PROCESSO QUE PODE SER CONFIRMADO ATRÁVES DO STATUS.

==========================================================================================
--- GERALMENTE QUANDO ESTAMOS NO COTIDIANO DA EMPRESA NÓS NÃO CRIAMOS VÁRIAS 'BRANCHS' PARA IR TRABALHANDO. É MAIS COMUM NÓS PEGARMOS ALGUNS ARQUIVOS E ADICIONAR, REMOVER OU MODIFICAR. NO NOSSO EXEMPLOS, NÓS ESTAMOS UTILIZANDO AS DUAS NOVAS. E VALE RESSALTAR QUE HÁ OUTROS MEIOS PARA FAZER EM BRANCHS EM ANDAMENTO.
--- CONTUDO, VAMOS APROVEITAR O EXEMPLO DE CRIAR ARQUIVOS E UMA NOVA BRANCH. E O COMANDO QUE FARÁ ESSA COMUNICAÇÃO É:
	-> GIT REMOTE ADD ORIGIN <https do hub de gits>

O COMANDO É FÁCIL DE ENTENDER. A PRIMEIRA PARTE DO 'REMOTE' ESTAMOS COMUNICANDO QUE É UM HUB REMOTO. O 'ADD' VEM PARA ADICIONAR, NO CASO VOCÊ ESTÁ ADICIONANDO UM HUB REMOTO DE REPOSITÓRIO GIT. O 'ORIGIN' É UM NOME QUE PODE VARIAR, MAS POR PADRÃO ELE FOI DENOMINADO ASSIM PARA SUBSTITUIR O CONCEITO DE ORIGEM. E O LINK DO HUB CONTENDO A BRANCH PARA VERSIONAR O CÓDIGO.
O COMANDO GIT REMOTE AINDA APRESENTA VÁRIAS CONFIGURAÇÕES QUE PODEMOS FAZER COM O NOSSO PROJETO. UM DOS COMANDOS É O:
	-> GIT REMOTE -V

O RETORNO DESSE COMANDO SÃO DUAS BRANCH, POR PADRÃO CHAMADAS DE 'ORIGIN', PORÉM A DIFERENÇA É QUE UM CAMINHO É PARA FETCH E OUTRO PARA PUSH. O FETCH É MUITO USADO PARA A RECUPERAÇÃO, TAMBÉM CHAMADO DE PULL. E O PUSH PARA ENVIO.

=========================================================================================
--- E É EXATAMENTE ESSE PUSH QUE SERÁ VISTO AGORA. NESSE MOMENTO, JÁ TEMOS:
	- INICIAMOS O GIT EM UM LOCAL COM (GIT INIT)
	- INSERIMOS NOVOS ARQUIVOS
	- VERIFICAMOS O STATUS (GIT STATUS)
	- TRACKEAMOS OS ARQUIVOS (GIT ADD)
	- NOEAMOS O NOSSO COMMIT (GIT COMMIT -M 'coments')
	- RETIRAMOS ARQUIVOS (GIT RM --CACHED <file>
	- CONECTAMOS COM O SERVIDOR (GIT REMOTE ADD ORIGIN <https>

MAS AINDA NÃO ENVIAMOS OS ARQUIVOS. ESTES ARQUIVOS AINDA NÃO ESTÃO NO SERVIDOR. O COMANDO É:
	-> GIT PUSH

O RETORNO PODE SER UMA INFORMAÇÃO DO GIT DIZENDO QUE NÃO EXISTE UMA BRANCH MASTER. E QUE VOCÊ PRECISA DEFINIR UMA. SE ESSA FOR A MENSAGEM O COMANDO:
	-> GIT PUSH --SET-UPSTREAM ORIGIN MASTER

:IRÁ APARECER NA TELA. BASTA EXECUTAR ESSE COMANDO E DEPOIS BASTA DIGITAR USUÁRIO E SENHA DO HUB DE GITS. CASO APAREÇA ALGUMAS MENSAGENS AMARELAS NA TELA, É O GIT TE DIZENDO QUE PODEM EXISTIR ARQUIVOS NO HUB QUE VOCÊ NÃO POSSUE NO REPOSITÓRIO LOCAL. HÁ DUAS ALTERNATIVAS PARA RESOLVER ESSE PROBLEMAS, UMA DELAS É UTILIZANDO O PULL, MAS IREMOS FOCAR NA OUTRA. A OUTRA FORMA É UTILIZAR DO FORCE PARA PODER ENVIAR OS ARQUIVOS. O COMANDO É:
	-> GIT PUSH --SET-UPSTREAM ORIGIN MASTER -F

ESSE COMANDO IRÁ ENVIAR OS ARQUIVOS DESCONSIDERANDO O AVISO EMITIDO.

=========================================================================================
--- TODAS AS VEZES QUE VOCÊ MODIFICAR OS SEUS ARQUIVOS, VOCÊ DEVE SEGUIR AO MENOS ALGUNS PASSOS PARA VERSIONAR NOVAMENTE OS ARQUIVOS. E SÃO:
	- GIT ADD . (PARA ADICIONAR TODOS OS ARQUIVOS)
	- GIT COMMIT -M (PARA ADICIONAR OS COMENTÁRIOS)
	- GIT PUSH (PARA ENVIAR OS ARQUIVOS)

--- ESSA SÃO AS MAIS BÁSICAS PARA PODER VERSIONAR OS ARQUIVOS.

=========================================================================================
---- É BEM FREQUENTE QUE TENHAM MAIS PESSOAS TRABALHANDO NA MESMA BRANCH QUE VOCÊ, GERALMENTE EM DIFERENTES ARQUIVOS. E PARA QUE NÃO HAJA PROBLEMAS DE CONFLITOS COM VERSÕES, É RECOMENDADO ANTES DE ENVIAR OS ARQUIVOS PARA O SERVIDOR, VERIFICAR SE OS SEUS ARQUIVOS ESTÃO ATUALIZADOS, ATÉ PORQUE OUTRAS PESSOAS PODEM ENVIAR ARQUIVOS NOVOS E/OU MODIFICADOS PARA O REPOSITÓRIO. O COMANDO PARA VERIFICAR ESSA ATUALIZAÇÃO COM OS ARQUIVOS É:
	-> GIT PULL

SÃO DOIS RETORNOS ESPERADOS, UM DE QUANDO ESTÁ ATUALIZADA, VIRÁ ESSA INFORMAÇÃO. JÁ A OUTRA, CASO SEU REPOSITÓRIO LOCAL ESTEJA DESATUALIZADO, O GIT IRÁ FAZER A ATUALIZAÇÃO DOS ARQUIVOS. E DEIXARÁ O SEU REPOSITÓRIO ATUALIZADO.

=========================================================================================
--- EXISTE UMA FORMA DE PEGAR UMA BRANCH PARA PODER MODIFICAR/INCREMENTAR ARQUIVOS. MUITO USADA EM EMPRESAS POIS AS BRANCHS JÁ EXISTEM. ESSE COMANDO IRÁ FAZER UM CLONE DE TODOS OS ARQUIVOS EXISTENTES NO SERVIDOR.
	-> GIT CLONE <https do repositorio>

O RETORNO ESPERADO DEVE SER UMA NOVA PASTA COM O RESPOSIT RIO CLONADO.

=============================================================================================
--- COMANDOS MAIS AVANÇADOS --

PARA TER VISUALIZAÇÃO DO SEU LOG DE COMMITS, EXISTE UM COMANDO QUE PODE SER UTILIZADO QUE IRA TRAZER AS PRINCIPAIS INFORMAÇÕES DOS SEUS ÚLTIMOS COMMIT. INCLUINDO O NÚMERO DA HASH. O COMANDO É:
	-> GIT LOG

O RETORNO SÃO ALGUNS INFORMAÇÕES IMPORTANTE, COMO MENCIONADO ANTES, A HASH, O AUTOR, O DIA, A HORA, ENTRE OUTROS.....

PARA OBTER AIINDA MAIS DETALHES SOBRE UM OU MAIS OBJETOS (OBJETOS SENDO ELES COMMITS, TAG, ÁRVORES...) ESSA INFORMAÇÕES VÃO SE DIFERENCIAR CONFORME O OBJETO. ALÉM DISSO AINDA HÁ INÚMEROS OUTROS COMPLEMENTOS QUE SE POSSA USAR NO SHOW PARA OBTER MAIS DETALHES COMO EMAIL, AUTOR,... O COMANDO:
	-> GIT SHOW

=============================================================================================
--- DICAS VALIOSAS ---

FEZ COMMIT QUE NÃO DEVERIA? COMO RESOLVER?
	DOIS COMANDOS DO GIT SÃO ESSENCIAIS PARA CORRIGIR PROBLEMAS
	-> GIT RESET
	-> GIT REVERT

	O RESET DEVE SER USADO COM UM SUFIXO HEAD~n. ONDE n É O NÚMERO DE COMMITS. E O COMANDO IRÁ REVERTER O COMMIT. OU SEJA, PASSADO O NÚMERO n, O COMANDO IRÁ RETIRAR A QUANTIDADE INFORMADA DE COMMITS DA BRANCH. UTILIZADO PARA QUANDO VOCÊ PRECISA DESCARTAR TUDO O QUE FEZ ATÉ O MOMENTO NA SUA BRANCH E COMEÇAR DE NOVO. COM A UTILIZAÇÃO DESSE COMANDO, OS ARQUIVOS FICARÃO NA UNSTAGED, ENTÃO É PRECISO UTILIZAR O ADD PARA COMMITAR NOVAMENTE.
	E CASO VOCÊ TENHA FEITO PUSH NA BRANCH?
	NESSE CASO A ÚNICA FORMA DE ENVIAR AS ALTERAÇÕES É FAZENDO UM 'GIT PUSH -F' O QUE ACABARÁ RESULTANDO EM HISTÓRICO PERDIDO E GERANDO CONFUSÃO NAS RAMIFICAÇÕES, POR ISSO NÃO É ACONSELHAVÉL A SUA UTILIZAÇÃO EM BRANCHS COMPARTILHADAS.

	O REVERT DEVE SER UTILIZADO COM O SUFIXO HEAD~n. ONDE n É O NÚMERO DE COMMITS. E O COMANDO IRÁ REVERTER AS ALTERAÇÕES FEITAS APENAS PELA QUANTIDADE INFORMADA EM n, A CONTAR DO ÚLTIMO COMMIT. TAMBÉM PODE SER UTILIZADO PELO SHA DO COMMIT. 
	ESSE COMANDO É O INDICADO PARA SER UTILIZANDO EM BRANCHS COMPARTILHADAS, POIS IRÁ CRIAR UM NOVO COMMIT PARA AS ALTERAÇÕES REVERTIDAS E MANTERÁ O HISTÓRICO LIMPO.


RESUMINDO:
	-> RESET: DESAPARECE OS COMMITS, USO DESACONSELHAVÉL EM BRANCHS COMPARTILHADAS.
	-> REVERT: DESFAZ CRIANDO UM NOVO COMMIT, ACONSELHAVÉL UTILIZAR EM BRANCHS COMPARTILHADAS.

UMA EXPLICAÇÃO MAIS DETALHADA EM:
https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting

FONTE: DAIANE GOMES (https://twitter.com/danianepg) EM (https://twitter.com/danianepg/status/1491169936433360897)
=============================================================================================

SITE PARA PRATICAR COMANDOS (EM INGLÊS):
https://learngitbranching.js.org/

SITE COM DICAS DOS COMANDOS (EM PORTUGUÊS):
https://gitfichas.com/

10 COMANDOS GIT IMPORTANTES (EM INGLÊS):
https://www.freecodecamp.org/news/10-important-git-commands-that-every-developer-should-know/